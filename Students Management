#include <iostream>
#include <string>
#include <vector>
#include <bits/stdc++.h>
#include <fstream>
#include <map>
#include <cctype>
using namespace std;

//-----------------------------  SIGN IN - LOG IN  -----------------------------
map<string, string> studentAccounts;
map<string, string> lecturerAccounts;
map<string, string> parentsAccounts;
map<string, string> departmentAccounts;

const string departmentfilename = "department_accounts.txt";
const string studentfilename = "student_accounts.txt";
const string parentsfilename = "parents_accounts.txt";
const string lecturerfilename = "lecturer_accounts.txt";

void loadAccountsFromFile(const string &filename, map<string, string> &accounts)
{
    ifstream file(filename);

    // Kiểm tra xem tệp có tồn tại không, nếu không thì tạo mới
    if (!file.is_open())
    {
        ofstream createFile(filename);
        createFile.close();
        file.open(filename);
    }

    if (file.is_open())
    {
        string username, password;
        while (file >> username >> password)
        {
            accounts[username] = password;
        }
        file.close();
    }
    else
    {
        cerr << "Error opening the file: " << filename << "\n";
    }
}

void registerAccount(const string &filename, map<string, string> &accounts)
{
    string username, password;

    cout << "Enter new username: ";
    cin >> username;
    // Kiểm tra xem tệp có tồn tại không, nếu không thì tạo mới
    ifstream file(filename);
    if (!file.is_open())
    {
        ofstream createFile(filename);
        createFile.close();
        file.open(filename);
    }

    // Kiểm tra xem tài khoản đã tồn tại chưa
    if (accounts.find(username) == accounts.end())
    {
        cout << "Enter new password: ";
        cin >> password;

        accounts[username] = password;

        ofstream file(filename, ios::app);
        if (file.is_open())
        {
            file << username << " " << password << "\n";
            file.close();
            cout << "Account registered successfully.\n";
        }
        else
        {
            cerr << "Error opening the file: " << filename << "\n";
        }
    }
    else
    {
        cerr << "Username already exists. Please choose a different username.\n";
    }
}

bool login(const string &username, const string &password, const map<string, string> &accounts)
{
    auto it = accounts.find(username);
    if (it != accounts.end() && it->second == password)
    {
        cout << "Login successful.\n";
        return true;
    }
    else
    {
        cerr << "Login failed. Invalid username or password.\n";
        return false;
    }
}

void deleteAccounts(const string &filename, const string &usernameToDelete, const string &passwordToDelete, map<string, string> &accounts)
{
    ifstream inFile(filename);
    if (!inFile.is_open())
    {
        cerr << "Error opening the file: " << filename << endl;
        return;
    }
    ofstream tempFile("temp.txt"); // Mở file tạm để ghi
    if (!tempFile.is_open())
    {
        cerr << "Error opening the temporary file." << endl;
        inFile.close();
        return;
    }
    string line; // Duyệt qua từng dòng trong file gốc
    bool usernameFound = false;
    while (getline(inFile, line))
    {
        string username, password;
        istringstream iss(line);

        if (iss >> username >> password)
        {
            if (username != usernameToDelete || password != passwordToDelete)
            {
                tempFile << line << endl;
            }
            else
            {
                accounts.erase(username);
                usernameFound = true;
            }
        }
    }
    inFile.close();
    tempFile.close();
    if (usernameFound)
    {
        remove(filename.c_str());
        rename("temp.txt", filename.c_str());
    }
    else
    {
        cerr << "Invalid username or password!" << endl;
        remove("temp.txt");
    }
}

//-----------------------------  Student  -----------------------------
class Student
{
private:
    string full_name;
    string student_id;

public:
    // Constructor
    Student()
    {
        full_name = "";
        student_id = "";
    }

    string getFullname()
    {
        return full_name;
    }
    string getStudentID()
    {
        return student_id;
    }

    void setStudentID(const string &id)
    {
        student_id = id;
    }
    void setFullname(const string &name)
    {
        full_name = name;
    }

    virtual void print_info()
    {
        cout << "Full Name: " << full_name << endl;
        cout << "StudentID: " << student_id << endl;
    }
};
void inputStudent(Student &student)
{
    string temp;
    cout << "Enter full name: ";
    getline(cin, temp);
    student.setFullname(temp);

    cout << "Enter StudentID: ";
    getline(cin, temp);
    student.setStudentID(temp);
}
void displayStudent(const vector<Student *> &student)
{
    cout << "Student List:\n";
    for (const auto &student : student)
    {
        student->print_info();
    }
}

//-----------------------------  LECTURER  -----------------------------
class Lecturer
{
private:
    string full_name;
    string lecturer_id;

public:
    // Constructor
    Lecturer()
    {
        full_name = "";
        lecturer_id = "";
    }

    string getFullname()
    {
        return full_name;
    }
    string getLecturerID()
    {
        return lecturer_id;
    }

    void setLecturerID(const string &id)
    {
        lecturer_id = id;
    }
    void setFullname(const string &name)
    {
        full_name = name;
    }

    virtual void print_info()
    {
        cout << "Full Name: " << full_name << endl;
        cout << "LecturerID: " << lecturer_id << endl;
    }
};

void inputLecturer(Lecturer &lecturer)
{
    string temp;
    cout << "Enter full name: ";
    getline(cin, temp);
    lecturer.setFullname(temp);

    cout << "Enter LecturerID: ";
    getline(cin, temp);
    lecturer.setLecturerID(temp);
}

void displayLecturer(const vector<Lecturer *> &lecturer)
{
    cout << "Lecturer List:\n";
    for (const auto &lecturer : lecturer)
    {
        lecturer->print_info();
    }
}

//-----------------------------  PARENTS   -----------------------------
class Parents
{
private:
    string full_name;

public:
    // Constructor
    Parents()
    {
        full_name = "";
    }

    string getFullname()
    {
        return full_name;
    }

    void setFullname(const string &name)
    {
        full_name = name;
    }

    virtual void print_info()
    {
        cout << "Full Name: " << full_name << endl;
    }
};

void inputParents(Parents &parents)
{
    string temp;
    cout << "Enter full name: ";
    getline(cin, temp);
    parents.setFullname(temp);
}

//-----------------------------  DEPARTMENT  -----------------------------
class Department
{
private:
    string full_name;
    string department_id;

public:
    // Constructor
    Department()
    {
        full_name = "";
        department_id = "";
    }
    string getFullname()
    {
        return full_name;
    }
    string getDepartmentId()
    {
        return full_name;
    }
    void setFullname(const string &name)
    {
        full_name = name;
    }
    void setDepartmentID(const string &id)
    {
        department_id = id;
    }
};

//-----------------------------  MENU  -----------------------------
// Gọi sau khi đăng nhập
void displayStudentMenu()
{
    cout << "-----------------------------" << endl;
    cout << "Select an option:" << endl;
    cout << "1. Display your personal information" << endl;
    cout << "0. Exit" << endl;
}
void displayLecturerMenu()
{
    cout << "-----------------------------" << endl;
    cout << "Select an option:" << endl;
    cout << "1. Display student's information in class" << endl;
    cout << "2. Change student's information in class" << endl;
    cout << "0. Exit" << endl;
}
void displayParentsMenu()
{
    cout << "-----------------------------" << endl;
    cout << "Select an option:" << endl;
    cout << "1. Display student's information in class" << endl;
    cout << "0. Exit" << endl;
}
void displayDepartmentMenu()
{
    cout << "-----------------------------" << endl;
    cout << "Select an option:" << endl;
    cout << "1. Create new account for students: " << endl;
    cout << "2. Delete students's account: " << endl;
    cout << "0. Exit" << endl;
}

//-----------------------------  HÀM MAIN  -----------------------------
int main()
{
    string username, password;
    string usernameToDelete, passwordToDelete;
    vector<Lecturer *> lecturerList;
    vector<Student *> studentList;
    vector<Parents *> parentsList;
    vector<Department *> departmentList;
    while (true)
    {
        char userType;
        cout << "Enter the type of user (S for Student, L for Lecturer, P for Parents, D for Department): ";
        cin >> userType;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        if (tolower(userType) == 's') //----------------STUDENTS----------------
        {
            while (true)
            {
                cout << "Log in: " << endl;
                loadAccountsFromFile(studentfilename, studentAccounts);
                cout << "Enter your username(ID): ";
                cin >> username;
                cout << "Enter your password: ";
                cin >> password;
                bool loginSuccess = login(username, password, studentAccounts);
                if (loginSuccess)
                {
                    displayStudentMenu();
                    int choice;
                    cout << "Enter your choice: ";
                    cin >> choice;
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    switch (choice)
                    {
                    case 2:
                        cout << "Update personal information: " << endl;
                        {
                            Student *student = new Student();
                            inputStudent(*student);
                            studentList.push_back(student);
                        }
                        break;
                    case 1:
                        cout << "Display your information: " << endl;
                        displayStudent(studentList);
                        break;
                    case 0:
                        // Exit the program
                        return 0;
                    default:
                        cout << "Invalid choice. Please enter a valid option." << endl;
                    }
                }
            }
        }
        else if (userType == 'L' || userType == 'l') //----------------LECTURER----------------
        {
            while (true)
            {
                displayLecturerMenu();
                int choice;
                cout << "Enter your choice: ";
                cin >> choice;
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                switch (choice)
                {
                case 2:
                    cout << "Update personal information: " << endl;
                    {
                        Lecturer *lecturer = new Lecturer();
                        inputLecturer(*lecturer);
                        lecturerList.push_back(lecturer);
                    }
                    break;
                case 1:
                    cout << "Display your information: " << endl;
                    displayLecturer(lecturerList);
                    break;
                case 3:
                    cout << "Display student in your class: " << endl;
                    displayStudent(studentList);
                    break;
                case 0:
                    // Exit the program
                    return 0;

                default:
                    cout << "Invalid choice. Please enter a valid option." << endl;
                }
            }
        }
        else if (userType == 'P' || userType == 'p') //----------------PARENTS----------------
        {
            while (true)
            {
                displayParentsMenu();
                int choice;
                cout << "Enter your choice: ";
                cin >> choice;
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                switch (choice)
                {
                case 0:
                    // Exit the program
                    return 0;
                default:
                    cout << "Invalid choice. Please enter a valid option." << endl;
                }
            }
        }
        else if (userType == 'D' || userType == 'd') //----------------DEPARTMENT----------------
        {
            while (true)
            {
                loadAccountsFromFile(departmentfilename, departmentAccounts);
                cout << "Log in: " << endl;
                cout << "Username(ID): ";
                cin >> username;
                cout << "Password: ";
                cin >> password;
                bool loginSuccess = login(username, password, departmentAccounts);
                if (loginSuccess)
                {
                    displayDepartmentMenu();
                    int choice;
                    char userTypeToDelete;
                    cout << "Enter your choice: ";
                    cin >> choice;
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    switch (choice)
                    {
                    case 1:
                        registerAccount(studentfilename, studentAccounts);
                        break;
                    case 2:
                        cout << "Enter the type of user(S for Student, L for Lecturer, P for Parents): " << endl;
                        cin >> userTypeToDelete;
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                        cout << "Enter username to delete: ";
                        cin >> usernameToDelete;
                        cout << "Enter password: ";
                        cin >> passwordToDelete;
                        if (tolower(userTypeToDelete) == 's')
                        {
                            deleteAccounts(studentfilename, usernameToDelete, passwordToDelete, studentAccounts);
                        }
                        else if (tolower(userTypeToDelete) == 'l')
                        {
                            deleteAccounts(lecturerfilename, usernameToDelete, passwordToDelete, lecturerAccounts);
                        }
                        else if (tolower(userTypeToDelete) == 'p')
                        {
                            deleteAccounts(parentsfilename, usernameToDelete, passwordToDelete, parentsAccounts);
                        }
                        break;
                    case 0:
                        // Exit the program
                        return 0;
                    default:
                        cout << "Invalid choice. Please enter a valid option." << endl;
                    }
                 }
            }
        }
        else
        {
            cout << "Invalid user type, please enter again!" << endl;
            continue;
        }
        break;
    }
}
